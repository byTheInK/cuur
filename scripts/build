#!/bin/bash
set -e

command_exists() {
  command -v "$1" >/dev/null 2>&1
}

handle_error() {
  echo "Error: $1"
  exit 1
}

for cmd in cargo rpmbuild tar; do
  command_exists "$cmd" || handle_error "$cmd is not installed or not in PATH"
done

echo "Cleaning up old builds..."
rm -rf build/
mkdir -p build/rpm build/deb build/aur build/tarball build/windows bin

echo "Building .rpm..."
cargo rpm build || handle_error "RPM build failed"
mv target/release/rpmbuild/RPMS/x86_64/* build/rpm/ 2>/dev/null || true

echo "Building .deb..."
cargo deb || handle_error "DEB build failed"
mv target/debian/* build/deb/ 2>/dev/null || true

echo "Building AUR package..."
cargo aur || handle_error "AUR build failed"
AUR_PACKAGE_DIR=$(find target/cargo-aur -type d -name "*.pkg.tar.zst" -exec dirname {} \;)
tar -czvf build/aur/aur_package.tar.gz -C "$AUR_PACKAGE_DIR" . 2>/dev/null || true

echo "Building Tarball package..."
cargo build --release || handle_error "Tarball build failed"
tar -czvf build/tarball/cuur.tar.gz -C target/release cuur 2>/dev/null || true

echo "Building Windows package..."
cargo build --target x86_64-pc-windows-gnu --release || handle_error "Windows build failed"
mv target/x86_64-pc-windows-gnu/release/*.exe build/windows/ 2>/dev/null || true

echo "Successfully built all of the packages"

echo "Deploying..."
sleep 1

copy_package() {
  local source_dir=$1
  local dest_dir=$2
  if cp -r "$source_dir"/* "$dest_dir" 2>/dev/null; then
    echo "$source_dir packages copied successfully."
  else
    echo "Failed to copy $source_dir packages."
  fi
}

echo "Copying packages to bin directory..."

copy_package "build/rpm" "bin"
copy_package "build/deb" "bin"
copy_package "build/aur" "bin"
copy_package "build/tarball" "bin"
copy_package "build/windows" "bin"

echo "Completed building and deploying packages."
