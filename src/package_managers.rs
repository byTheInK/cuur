use std::collections::HashMap;

pub fn get_package_manager_install(distro: &str) -> Option<&'static str> {
    let map: HashMap<&str, &str> = HashMap::from([
        ("AIX", "installp -a"),
        ("AlmaLinux", "dnf install"),
        ("Alpaquita Linux", "apk add"),
        ("Alpine Linux", "apk add"),
        ("Amazon Linux AMI", "yum install"),
        ("Android", "pkg install"),
        ("Arch Linux", "pacman -S"),
        ("Artix Linux", "pacman -S"),
        ("CachyOS", "pacman -S"),
        ("CentOS", "dnf install"),
        ("Debian", "apt install"),
        ("DragonFly BSD", "pkg install"),
        ("Emscripten", "emsdk install"),
        ("EndeavourOS", "pacman -S"),
        ("Fedora", "dnf install"),
        ("FreeBSD", "pkg install"),
        ("Garuda Linux", "pacman -S"),
        ("Gentoo Linux", "emerge"),
        ("HardenedBSD", "pkg install"),
        ("illumos", "pkgin install"),
        ("Kali Linux", "apt install"),
        ("Mabox", "pacman -S"),
        ("Manjaro", "pacman -S"),
        ("Mariner", "tdnf install"),
        ("MidnightBSD", "mport install"),
        ("Mint", "apt install"),
        ("NetBSD", "pkgin install"),
        ("NixOS", "nix env -i"),
        ("Nobara Linux", "dnf install"),
        ("OpenBSD", "pkg_add"),
        ("OpenCloudOS", "dnf install"),
        ("openEuler (EulerOS)", "dnf install"),
        ("openSUSE", "zypper install"),
        ("Oracle Linux", "dnf install"),
        ("Pop!_OS", "apt install"),
        ("Raspberry Pi OS", "apt install"),
        ("Red Hat Linux", "rpm -i"),
        ("Red Hat Enterprise Linux", "dnf install"),
        ("Redox", "pkg install"),
        ("Rocky Linux", "dnf install"),
        ("Solus", "eopkg install"),
        ("SUSE Linux Enterprise Server", "zypper install"),
        ("Ubuntu", "apt install"),
        ("Ultramarine Linux", "dnf install"),
        ("Unknown", "unknown"),
        ("Void Linux", "xbps-install -S"),
        ("macOS", "brew install"),
    ]);
    map.get(distro).copied()
}

pub fn get_package_manager_remove(distro: &str) -> Option<&'static str> {
    let map: HashMap<&str, &str> = HashMap::from([
        ("AIX", "installp -u"),
        ("AlmaLinux", "dnf remove"),
        ("Alpaquita Linux", "apk del"),
        ("Alpine Linux", "apk del"),
        ("Amazon Linux AMI", "yum remove"),
        ("Android", "pkg uninstall"),
        ("Arch Linux", "pacman -R"),
        ("Artix Linux", "pacman -R"),
        ("CachyOS", "pacman -R"),
        ("CentOS", "dnf remove"),
        ("Debian", "apt remove"),
        ("DragonFly BSD", "pkg delete"),
        ("Emscripten", "emsdk uninstall"),
        ("EndeavourOS", "pacman -R"),
        ("Fedora", "dnf remove"),
        ("FreeBSD", "pkg delete"),
        ("Garuda Linux", "pacman -R"),
        ("Gentoo Linux", "emerge -C"),
        ("HardenedBSD", "pkg delete"),
        ("illumos", "pkgin remove"),
        ("Kali Linux", "apt remove"),
        ("Mabox", "pacman -R"),
        ("Manjaro", "pacman -R"),
        ("Mariner", "tdnf remove"),
        ("MidnightBSD", "mport remove"),
        ("Mint", "apt remove"),
        ("NetBSD", "pkgin remove"),
        ("NixOS", "nix-env -e"),
        ("Nobara Linux", "dnf remove"),
        ("OpenBSD", "pkg_delete"),
        ("OpenCloudOS", "dnf remove"),
        ("openEuler (EulerOS)", "dnf remove"),
        ("openSUSE", "zypper remove"),
        ("Oracle Linux", "dnf remove"),
        ("Pop!_OS", "apt remove"),
        ("Raspberry Pi OS", "apt remove"),
        ("Red Hat Linux", "rpm -e"),
        ("Red Hat Enterprise Linux", "dnf remove"),
        ("Redox", "pkg remove"),
        ("Rocky Linux", "dnf remove"),
        ("Solus", "eopkg remove"),
        ("SUSE Linux Enterprise Server", "zypper remove"),
        ("Ubuntu", "apt remove"),
        ("Ultramarine Linux", "dnf remove"),
        ("Unknown", "unknown"),
        ("Void Linux", "xbps-remove"),
        ("macOS", "brew uninstall"),
    ]);
    map.get(distro).copied()
}

pub fn get_package_manager_update(distro: &str) -> Option<&'static str> {
    let map: HashMap<&str, &str> = HashMap::from([
        ("AIX", "instfix -i"),
        ("AlmaLinux", "dnf update"),
        ("Alpaquita Linux", "apk update"),
        ("Alpine Linux", "apk update"),
        ("Amazon Linux AMI", "yum update"),
        ("Android", "pkg update"),
        ("Arch Linux", "pacman -Syu"),
        ("Artix Linux", "pacman -Syu"),
        ("CachyOS", "pacman -Syu"),
        ("CentOS", "dnf update"),
        ("Debian", "apt update && apt upgrade"),
        ("DragonFly BSD", "pkg upgrade"),
        ("Emscripten", "emsdk update"),
        ("EndeavourOS", "pacman -Syu"),
        ("Fedora", "dnf update"),
        ("FreeBSD", "pkg upgrade"),
        ("Garuda Linux", "pacman -Syu"),
        ("Gentoo Linux", "emerge --sync && emerge -uD @world"),
        ("HardenedBSD", "pkg upgrade"),
        ("illumos", "pkgin upgrade"),
        ("Kali Linux", "apt update && apt upgrade"),
        ("Mabox", "pacman -Syu"),
        ("Manjaro", "pacman -Syu"),
        ("Mariner", "tdnf update"),
        ("MidnightBSD", "mport upgrade"),
        ("Mint", "apt update && apt upgrade"),
        ("NetBSD", "pkgin full-upgrade"),
        ("NixOS", "nixos-rebuild switch"),
        ("Nobara Linux", "dnf update"),
        ("OpenBSD", "syspatch"),
        ("OpenCloudOS", "dnf update"),
        ("openEuler (EulerOS)", "dnf update"),
        ("openSUSE", "zypper update"),
        ("Oracle Linux", "dnf update"),
        ("Pop!_OS", "apt update && apt upgrade"),
        ("Raspberry Pi OS", "apt update && apt upgrade"),
        ("Red Hat Linux", "up2date"),
        ("Red Hat Enterprise Linux", "dnf update"),
        ("Redox", "pkg update"),
        ("Rocky Linux", "dnf update"),
        ("Solus", "eopkg upgrade"),
        ("SUSE Linux Enterprise Server", "zypper update"),
        ("Ubuntu", "apt update && apt upgrade"),
        ("Ultramarine Linux", "dnf update"),
        ("Unknown", "unknown"),
        ("Void Linux", "xbps-install -Su"),
        ("macOS", "brew update && brew upgrade"),
    ]);
    map.get(distro).copied()
}


pub fn get_linux() -> Vec<String> {
    vec![
        "Alpaquita Linux".to_string(),
        "AlmaLinux".to_string(),
        "Alpine Linux".to_string(),
        "Amazon Linux".to_string(),
        "Arch Linux".to_string(),
        "Artix Linux".to_string(),
        "CachyOS".to_string(),
        "CentOS".to_string(),
        "Debian".to_string(),
        "EndeavourOS".to_string(),
        "Fedora".to_string(),
        "Garuda Linux".to_string(),
        "Gentoo Linux".to_string(),
        "Kali Linux".to_string(),
        "Mabox".to_string(),
        "Manjaro".to_string(),
        "Mariner".to_string(),
        "Mint".to_string(),
        "NixOS".to_string(),
        "Nobara Linux".to_string(),
        "openSUSE".to_string(),
        "Oracle Linux".to_string(),
        "Pop!_OS".to_string(),
        "Red Hat".to_string(),
        "Rocky Linux".to_string(),
        "Solus".to_string(),
        "SUSE Linux".to_string(),
        "Ubuntu".to_string(),
        "Void Linux".to_string(),
        "Ultramarine Linux".to_string(),
    ]
}

pub fn get_bsd() -> Vec<String> {
    vec![
        "DragonFly BSD".to_string(),
        "FreeBSD".to_string(),
        "HardenedBSD".to_string(),
        "MidnightBSD".to_string(),
        "NetBSD".to_string(),
        "OpenBSD".to_string(),
    ]
}
